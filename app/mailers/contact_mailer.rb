class ContactMailer < ApplicationMailer
  default from: ENV['SEND_MAIL']

  def contact_mail(contact)
    @contact = contact
    mail(:to => contact.email, :subject => 'お問い合わせを承りました')
  end

  def received_mail(contact)
    @contact = contact
    mail(:to => ENV['SEND_MAIL'], :subject => 'お問い合わせ通知')
  end

end

# メール送信はコントローラーのアクションから実行するので、
# ContactMailer.contact_mail(@contact).deliverを組み込んでいる。
# ここでは、お問い合わせ内容をデータベースに保存した後、メール送信を行う流れ

# メーラークラスを作成する

# rails g mailer contact
# いろいろとファイルが生成されましたが、contact_mailer.rbファイルを必要事項を記述していく。
# 下記では、mailメソッドでお問い合わせ内容の宛先（to)、タイトル(subject)を設定している、

# メールサーバーを設定していく。
# 今回はGmailのメールサーバーを利用してメール送信を行います。
# Gmailアカウントのセキュリティで２段階認証の設定とアプリパスワードの生成を行う必要があります。
# user_nameに自分のアカウントユーザー名、passwordに自分のアカウントパスワードを入力
# 本番環境では、環境変数を使う

# メール送信をする上で必要な設定を行っています。
# config.action_mailer.perform_deliveries = true
# ➡メール送信を有効にする
# config.action_mailer.raise_delivery_errors = true
# ➡メール送信が出来なかった場合、エラーを発生させる
# config.action_mailer.delivery_method = :smtp
# ➡メール送信する際に通信プロトコルSMTPを利用する

# メールテンプレートを作成する

# app/views/contact_mailer
# 今回、HTML形式とメールテンプレートとテキスト形式のメールテンプレートの２つを作成
# 送信相手によっては、HTML形式のメールを受け取ることができない人もいるので、テキスト形式も作成しておく。

# 今回はGmailのメール送信サーバー（ＳMTPサーバー）を使用して、管理者とユーザーへメールを送信している。

# GmailのSMTPサーバーのポート
# ➡ポートとは、サーバーがデータを送受信する出入口のようなもの。サーバーを郵便局に例えると、ポート
# は、私書箱だ。インターネット上では、様々なサービスが提供されていて、このサービスごとにポートを分けて使用することになっている。

# GmailのSMTPサーバーのポート番号は？
# ➡ポートには0~65535の番号が割り当てられていて、この番号で識別する。送信サーバーが使う番号は、一般的に25/465/587の３つ。
# GmailのSMTPサーバーのポート番号は587
# GmailのSMTPのポート番号は、通常587と考えよう。セキュリティ（暗号化）方式としてTLS/STARTTLSが使えない場合は、465となる。

# GmailのSMTPサーバーでポート25は使わない
# 一般的に、セキュリティ（暗号化）や認証を必要としない場合に使うポート番号の25は、Gmailでは利用できない。

# SMTPサーバーは送信サーバーなので、メールの差出人を識別する必要がない。誰が出したメールかわからなくても、宛先に向けて送信するだけでよいからだ。

# しかし、迷惑メールなどを送信する目的で、不正に使用するのを防止する意味から、一般的にSMTPサーバーでも差出人が正規のユーザーかどうか認証を行うようになってきた。ちなみに、認証にはIDとパスワードを利用する。

# GmailのSMTPサーバーの認証方式
# Gmailでは、SMTPサーバーを利用する場合、SMTP認証が必須となる。認証を必要とするので、ポート番号は465か587のいずれかを使う。

# アカウント名やパスワードを正しく設定しても、エラーメッセージが表示され、メールの送受信ができないことがある。このような場合は、 Gmailが要求するセキュリティレベルにメールソフトが対応していないことが考えられる。

# 対策はGmail側の設定変更で行う。おすすめは、「2段階認証」を有効にして、「アプリパスワード」を利用する方法だ。設定から利用方法まで少々複雑なので、セキュリティレベルは低くなってしまうが、「安全性の低いアプリのアクセスを有効にする」方法なら簡単に設定できる。

# WebブラウザでGoogleアカウントにアクセスして、左側の「セキュリティ」をクリック。「安全性の低いアプリのアクセス」の「アクセスを有効にする」をクリックして、進んだ先でスイッチをオンにすればよい。

# BASE64とは、バイナリデータを一定の規則に基づいてテキスト（文字）データに置き換える変換方式の一つで、64種類の英数字のみを用いてデータを表現する方式。 

# バイナリデータ（binary data）とは、コンピュータが理解しやすいデータ（2進数で表現されたデータ）であり、テキストデータ以外のデータのことです。

# PLAIN	「認可識別子<NULL>認証識別子<NULL>パスワード」形式の平文によるユーザー認証方式です。BASE64でエンコードする場合もあります。
# LOGIN	LOGINも PLAIN同様、平文を用いた認証形式です。標準仕様が存在していないので、各社製品間の互換性もあまり考慮されていません。

# loginだと標準仕様がなく、互換性もあまり考慮されていないので、plain認証を選択。

# PLAIN認証は簡単に説明するとユーザー名とパスワードをBase64でエンコードして送信する。
# エンコード（英：encode）とは

# データを他の形式へ変換すること

# プロパティ	役割
# to	送信先の指定
# cc	一斉送信先の指定
# bcc	非表示送信先の指定
# from	メールの送信元名
# subject	メールタイトル
# date	メールの送信日時
# reply_to	返信用アドレスの指定

# TLS(SSL)での暗号化
# ➡データを暗号化し、そのまま完全な状態で伝送するため。

# メーラーは「メーラー名.メソッド名」として、クラスメソッドを呼び出すように実行できる。
# 実際の送信を担うのはdeliverメソッド

# メーラー
# ➡メールソフトのこと。メールを見たり送ったりするときに使う。メールサーバーとPC（機械）との橋渡し。

